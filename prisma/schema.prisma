generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid()) @db.Uuid
  email              String        @unique
  password           String
  firstName          String
  lastName           String?
  telephone          String?
  profileImage       String?
  notifications      Boolean       @default(true)
  emailConfirmed     Boolean       @default(false)
  telephoneConfirmed Boolean       @default(false)
  isActive           Boolean       @default(true)
  loginProvider      LoginProvider @default(LOCAL)
  address            String?
  tickets            Ticket[]
  roles              UserRole[]
  taskMessage        TaskMessage[]
  attachment         Attachment[]
  createdAt          DateTime      @default(now())
  deletedAt          DateTime?
  task               Task[]
  applications UserApplication[]
  documents        Document[]
}

model Application {
  id        String            @id @default(uuid()) @db.Uuid
  status    ApplicationStatus @default(PENDING)
  users     UserApplication[]
  documents Document[]
  tickets   Ticket[]          @relation("ApplicationToTicket")
  tasks     Task[]
  createdAt DateTime          @default(now())
  updatedAt DateTime?         @updatedAt
  deletedAt DateTime?
}

model UserApplication {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  applicationId String      @db.Uuid
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?
  tasks          Task[]
  documents      Document[]

  @@unique([userId, applicationId])
}

model Document {
  id           String          @id @default(uuid()) @db.Uuid
  companyId    String          @default(uuid()) @db.Uuid
  uploadedById String          @default(uuid()) @db.Uuid
  name         String
  key          String?
  bucketName   String?
  link         String?
  documentType String?
  fileType     String?
  fromStaff    Boolean         @default(false)
  application  UserApplication @relation(fields: [companyId], references: [id])
  uploadedBy   User            @relation(fields: [uploadedById], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  deletedAt    DateTime?
  applications Application[]
}


model UserRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @default(uuid()) @db.Uuid
  role      RoleType
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
  @@unique([userId, role])
}

model Token {
  id        String   @id @db.Uuid
  token     String   @unique
  createdAt DateTime @default(now())
  email     String
  expires   DateTime
}

model Ticket {
  id          String          @id @default(uuid()) @db.Uuid
  ticketNo    Int             @default(autoincrement())
  userId      String          @db.Uuid
  subject     String
  category    String
  status      TicketStatus    @default(OPEN)
  priority    TicketPriority
  attachments Attachment[]
  isActivate  Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
  user        User            @relation(fields: [userId], references: [id])
  messages    TicketMessage[]
  application Application[] @relation("ApplicationToTicket")
}

model TicketMessage {
  id          String       @id @default(uuid()) @db.Uuid
  ticketId    String       @db.Uuid
  userId      String       @db.Uuid
  message     String
  isStaff     Boolean
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  ticket      Ticket       @relation(fields: [ticketId], references: [id])
}

enum ApplicationStatus {
  PENDING
  ACTIVE
  INACTIVE
  INPROGRESS
  APPROVED
  REJECTED
  DOCTOR_APPROVAL
  DOCTOR_REJECTION
  DOCTOR_PENDING
  DOCTOR_INPROGRESS
  DOCTOR_COMPLETED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
  ON_HOLD
  WAITING_FOR_CUSTOMER
  WAITING_FOR_STAFF
  WAITING_FOR_THIRD_PARTY
  ESCALATED
  CANCELLED
  CLOSED_BY_CUSTOMER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum RoleType {
  SUPERADMIN
  ADMIN
  USER
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CRYPTO
  CASH
  OTHER
}

enum LoginProvider {
  LOCAL
  GOOGLE
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  RESOLVED
  CLOSED
  REOPENED
  ON_HOLD
  WAITING_FOR_CUSTOMER
  WAITING_FOR_STAFF
  WAITING_FOR_THIRD_PARTY
  ESCALATED
  CANCELLED
  CLOSED_BY_CUSTOMER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskType {
  GENERAL
  LEGAL
  ACCOUNTING
  TAX
  HR
  OTHER
}

model Attachment {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  url           String
  type          String
  uploadedById  String          @db.Uuid
  uploadedBy    User            @relation(fields: [uploadedById], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  task          Task[]
  taskMessage   TaskMessage[]
  ticket        Ticket[]
  ticketMessage TicketMessage[]
}

model Task {
  id                  String          @id @default(uuid()) @db.Uuid
  createdByUserId     String          @db.Uuid
  title               String?
  description         String?
  messages            TaskMessage[]
  Icon                String?
  status              TaskStatus
  priority            TaskPriority
  type                TaskType
  attachments         Attachment[]
  applicationId       String          @db.Uuid
  assignedApplication UserApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  createdBy           User            @relation(fields: [createdByUserId], references: [id])
  dueDate             DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  completedAt         DateTime?
  deletedAt           DateTime?
  application Application[]
}

model TaskMessage {
  id          String       @id @default(uuid()) @db.Uuid
  taskId      String       @db.Uuid
  userId      String       @db.Uuid
  message     String
  fromStaff   Boolean
  createdAt   DateTime     @default(now())
  task        Task         @relation(fields: [taskId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  attachments Attachment[]
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}

model Permission {
  id            String           @id @default(uuid()) @db.Uuid
  companyUserId String           @db.Uuid
  action        PermissionAction
  subject       String // The resource type (e.g., "Document")
  conditions    Json? // Optional conditions for the permission
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?

  @@unique([companyUserId, action, subject])
  @@map("permissions")
}
