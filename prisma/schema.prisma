generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid()) @db.Uuid
  email              String        @unique
  password           String
  firstName          String
  lastName           String?
  telephone          String?
  profileImage       String?
  notifications      Boolean       @default(true)
  emailConfirmed     Boolean       @default(false)
  telephoneConfirmed Boolean       @default(false)
  isActive           Boolean       @default(true)
  loginProvider      LoginProvider @default(LOCAL)
  address            String?
  roles              UserRole[]
  createdAt          DateTime      @default(now())
  deletedAt          DateTime?
  applications    Application[]
  appointments       Appointment[]
}

model Application {
  id          String            @id @default(uuid()) @db.Uuid
  userId      String?            @db.Uuid
  user        User?              @relation(fields: [userId], references: [id])
  status      ApplicationStatus @default(PENDING)
  submissions FormSubmission[] // Kullanıcının doldurduğu formlar bu başvuru altında
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
  deletedAt   DateTime?
}

model FormTemplate {
  id            String          @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  questions     FormQuestion[]
  createdAt     DateTime        @default(now())
  formSubmission FormSubmission[]
}

model FormQuestion {
  id             String        @id @default(uuid()) @db.Uuid
  formTemplateId String
  questionText   String
  answerType     String
  formTemplate   FormTemplate  @relation(fields: [formTemplateId], references: [id])
  answers        Answer[]      // Bu satırı ekleyin - Answer modeliyle karşılıklı ilişki

}

model FormSubmission { 
  id              String         @id @default(uuid()) @db.Uuid
  applicationId   String         @db.Uuid
  formTemplateId  String         @db.Uuid
  submittedAt     DateTime       @default(now())
  application     Application    @relation(fields: [applicationId], references: [id])
  formTemplate    FormTemplate   @relation(fields: [formTemplateId], references: [id])
  answers         Answer[]
  files           File[]         // İsteğe bağlı form düzeyinde dosya yüklemeleri
}

model Answer {
  id                String         @id @default(uuid()) @db.Uuid
  formSubmissionId  String
  formQuestionId    String
  value             Json
  formSubmission    FormSubmission @relation(fields: [formSubmissionId], references: [id])
  formQuestion      FormQuestion   @relation(fields: [formQuestionId], references: [id])
  files File[]
}


model File {
  id                String         @id @default(uuid()) @db.Uuid
  url               String
  uploadedAt        DateTime       @default(now())
  deletedAt    DateTime?
  formSubmissionId  String?        
  answerId          String?
  formSubmission    FormSubmission?  @relation(fields: [formSubmissionId], references: [id])
  answer            Answer?          @relation(fields: [answerId], references: [id])
}

model AppointmentType {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @unique
  description  String?
  duration     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id                String            @id @default(uuid()) @db.Uuid
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(PENDING)
  notes             String?
  user              User              @relation(fields: [userId], references: [id])
  userId            String            @db.Uuid
  appointmentType   AppointmentType   @relation(fields: [appointmentTypeId], references: [id])
  appointmentTypeId String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
}


model UserRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @default(uuid()) @db.Uuid
  role      RoleType
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Permission[]
  @@unique([userId, role])
}

model Permission {
  id            String           @id @default(uuid()) @db.Uuid
  action        PermissionAction
  subject       String // The resource type (e.g., "Document")
  conditions    Json? // Optional conditions for the permission
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?
  roles         UserRole[]       // Roles that have this permission
  @@unique([action, subject])
  @@map("permissions")
}

model Token {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  createdAt DateTime @default(now())
  email     String
  expires   DateTime
}

enum ApplicationStatus {
  PENDING
  ACTIVE
  INACTIVE
  INPROGRESS
  APPROVED
  REJECTED
  DOCTOR_APPROVAL
  DOCTOR_REJECTION
  DOCTOR_PENDING
  DOCTOR_INPROGRESS
  DOCTOR_COMPLETED
}


enum RoleType {
  APPLICANT
  CLIENT
  ADMIN
  USER
  OFFICER
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CRYPTO
  CASH
  OTHER
}

enum LoginProvider {
  LOCAL
  GOOGLE
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  RESOLVED
  CLOSED
  REOPENED
  ON_HOLD
  WAITING_FOR_CUSTOMER
  WAITING_FOR_STAFF
  WAITING_FOR_THIRD_PARTY
  ESCALATED
  CANCELLED
  CLOSED_BY_CUSTOMER
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}


// Randevu durumu için enum
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
