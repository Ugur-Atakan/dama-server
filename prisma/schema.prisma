generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid()) @db.Uuid
  email              String     @unique
  password           String
  firstName          String
  lastName           String
  telephone          String?
  profileImage       String?
  notifications      Boolean    @default(true)
  emailConfirmed     Boolean    @default(false)
  telephoneConfirmed Boolean    @default(false)
  isActive           Boolean    @default(true)
  address            String?
  roles              UserRole[]
  createdAt          DateTime   @default(now())
  deletedAt          DateTime?
}

model Applicator {
  id           String           @id @default(uuid()) @db.Uuid
  telephone    String           @unique
  firstName         String?
  lastName      String?
  email        String?
  birthDate    DateTime?
  address      String?
  status       ApplicatorStatus @default(WAITING_COMFIRMATION)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  deletedAt    DateTime?
  application Application?
  appointments Appointment[]
}

model Application {
  id                 String            @id @default(uuid()) @db.Uuid
  applicatorId       String?           @unique @db.Uuid  // Made this unique to enforce one-to-one
  applicator         Applicator?       @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  status             ApplicationStatus @default(PENDING)
  applicationNumber  String            @unique
  preApplicationData Json? // Pre-application form verileri
  applicationData    Json? // Application form verileri
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  deletedAt          DateTime?
}

model PreApplicationField {
  id          String @id @default(uuid())
  section     String
  step        Int
  defaultData Json?
}

model ApplicationField {
  id          String @id @default(uuid())
  section     String
  step        Int
  defaultData Json?
}

model Appointment {
  id              String            @id @default(uuid()) @db.Uuid
  startTime       DateTime
  endTime         DateTime
  status          AppointmentStatus @default(PENDING)
  notes           String?
  applicatorId    String?           @db.Uuid
  applicator      Applicator?       @relation(fields: [applicatorId], references: [id], onDelete: Cascade)
  appointmentType AppointmentType   @default(ONLINE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model UserRole {
  id          String       @id @default(uuid()) @db.Uuid
  userId      String       @default(uuid()) @db.Uuid
  role        RoleType
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Permission[]

  @@unique([userId, role])
}

model Permission {
  id         String           @id @default(uuid()) @db.Uuid
  action     PermissionAction
  subject    String // The resource type (e.g., "Document")
  conditions Json? // Optional conditions for the permission
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  deletedAt  DateTime?
  roles      UserRole[] // Roles that have this permission

  @@unique([action, subject])
  @@map("permissions")
}

model Token {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  createdAt DateTime @default(now())
  email     String
  expires   DateTime
}

model OTPToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  telephone     String  @unique
  expire    DateTime
  createdAt DateTime @default(now())
}

enum ApplicationStatus {
  PRE_APPLICATION
  PENDING
  USER_COMPLETED
  ACTIVE
  INACTIVE
  INPROGRESS
  COMPLETED
  APPROVED
  REJECTED
  DOCTOR_APPROVAL
  DOCTOR_REJECTION
  DOCTOR_PENDING
  DOCTOR_INPROGRESS
  DOCTOR_COMPLETED
}

enum ApplicatorStatus {
  WAITING_COMFIRMATION
  APPLICATOR
  SCHEDULED
  CLIENT
  ACTIVE
  INPROGRESS
  COMPLETED
  DOCTOR_PENDING
  DOCTOR_APPROVAL
  DOCTOR_REJECTION
  DOCTOR_INPROGRESS
  DOCTOR_COMPLETED
}

enum RoleType {
  LAWYER
  ADMIN
  USER
  OFFICER
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}

// Randevu durumu i√ßin enum
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}


enum AppointmentType {
  ONLINE
  INOFFICE
}
