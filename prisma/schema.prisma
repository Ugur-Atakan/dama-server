generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid()) @db.Uuid
  email              String        @unique
  password           String
  firstName          String
  lastName           String?
  telephone          String?
  profileImage       String?
  notifications      Boolean       @default(true)
  emailConfirmed     Boolean       @default(false)
  telephoneConfirmed Boolean       @default(false)
  isActive           Boolean       @default(true)
  loginProvider      LoginProvider @default(LOCAL)
  address            String?
  roles              UserRole[]
  createdAt          DateTime      @default(now())
  deletedAt          DateTime?
  applications       Application[]
  appointments       Appointment[]
}

model Application {
  id          String            @id @default(uuid()) @db.Uuid
  userId      String?           @db.Uuid
  user        User?             @relation(fields: [userId], references: [id])
  status      ApplicationStatus @default(PENDING)
    submissions FormSubmission[]
  files       File[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
  deletedAt   DateTime?

  @@unique([userId, id])
}

// Form şemaları için model
model FormSchema {
  id          String   @id @default(uuid()) @db.Uuid
  formId      String   @unique
  title       String // JSON encoded object for multiple languages
  description String?  @db.Text // JSON encoded object for multiple languages
  schema      Json // Form şemasının tamamı JSON olarak saklanır
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Form şemasına ait gönderimler için ilişki
  submissions FormSubmission[]

  @@map("form_schemas")
}

// Form gönderimleri için model
model FormSubmission {
  id           String   @id @default(uuid()) @db.Uuid
  formSchemaId String   @db.Uuid // formId yerine formSchemaId
  data         Json // Form verisi JSON olarak saklanır
  submittedBy  String? // Opsiyonel kullanıcı ID
  applicationId  String?    @db.Uuid  // Application ile ilişki
  application    Application? @relation(fields: [applicationId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Form şemasına referans
  formSchema FormSchema @relation(fields: [formSchemaId], references: [formId])

  @@map("form_submissions")
}

model File {
  id            String      @id @default(uuid())
  originalName  String
  path          String
  mimeType      String
  size          Int
  formId        String
  questionId    String
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  createdAt     DateTime    @default(now())
}

model AppointmentType {
  id           String        @id @default(uuid()) @db.Uuid
  name         String        @unique
  description  String?
  duration     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
}

model Appointment {
  id                String            @id @default(uuid()) @db.Uuid
  startTime         DateTime
  endTime           DateTime
  status            AppointmentStatus @default(PENDING)
  notes             String?
  user              User              @relation(fields: [userId], references: [id])
  userId            String            @db.Uuid
  appointmentType   AppointmentType   @relation(fields: [appointmentTypeId], references: [id])
  appointmentTypeId String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?
}

model UserRole {
  id          String       @id @default(uuid()) @db.Uuid
  userId      String       @default(uuid()) @db.Uuid
  role        RoleType
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Permission[]

  @@unique([userId, role])
}

model Permission {
  id         String           @id @default(uuid()) @db.Uuid
  action     PermissionAction
  subject    String // The resource type (e.g., "Document")
  conditions Json? // Optional conditions for the permission
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  deletedAt  DateTime?
  roles      UserRole[] // Roles that have this permission

  @@unique([action, subject])
  @@map("permissions")
}

model Token {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  createdAt DateTime @default(now())
  email     String
  expires   DateTime
}

enum ApplicationStatus {
  PRE_APPLICATION
  PENDING
  ACTIVE
  INACTIVE
  INPROGRESS
  APPROVED
  REJECTED
  DOCTOR_APPROVAL
  DOCTOR_REJECTION
  DOCTOR_PENDING
  DOCTOR_INPROGRESS
  DOCTOR_COMPLETED
}

enum RoleType {
  APPLICANT
  CLIENT
  ADMIN
  USER
  OFFICER
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CRYPTO
  CASH
  OTHER
}

enum LoginProvider {
  LOCAL
  GOOGLE
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  RESOLVED
  CLOSED
  REOPENED
  ON_HOLD
  WAITING_FOR_CUSTOMER
  WAITING_FOR_STAFF
  WAITING_FOR_THIRD_PARTY
  ESCALATED
  CANCELLED
  CLOSED_BY_CUSTOMER
}

enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
  MANAGE
}

// Randevu durumu için enum
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
